name: "Lint & Test"
on:
  push:
    branches-ignore:
      - $default-branch
  pull_request:
    branches:
      - $default-branch
env:
  DATABASE_USER: postgres
  DATABASE_PASSWORD: postgres
  DATABASE_NAME: booktracker
  SECRET_KEY: astupidsecretjusttogetcicdworking
jobs:
  build-lint-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.9 ]
    services:
      # Postgres service
      # See https://docs.github.com/en/free-pro-team@latest/actions/guides/creating-postgresql-service-containers
      # Also https://github.com/actions/example-services/blob/master/.github/workflows/postgres-service.yml
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: ${{ env.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          # Will assign a random free host port
          - 5432/tcp
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - id: cache-pipenv
        name: Cache Pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-
      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '11'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '15'
      - name: Install Python Dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pipenv
          pipenv install --deploy --dev
      - name: Install npm Dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      - name: Run migrations
        run: pipenv run python manage.py migrate
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: ${{ job.services.postgres.ports[5432] }}
      - name: Check Linting/Formatting
        run: |
          pipenv run black --check .
          pipenv run flake8 --extend-exclude venv/
      - name: Run Tests
        run: pipenv run python manage.py test
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: ${{ job.services.postgres.ports[5432] }}
